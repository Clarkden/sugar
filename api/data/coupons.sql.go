// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: coupons.sql

package sugar

import (
	"context"
)

const createCoupon = `-- name: CreateCoupon :one
INSERT INTO coupons (code, domain) VALUES (?, ?) RETURNING code
`

type CreateCouponParams struct {
	Code   *string `json:"code"`
	Domain *string `json:"domain"`
}

func (q *Queries) CreateCoupon(ctx context.Context, arg CreateCouponParams) (*string, error) {
	row := q.db.QueryRowContext(ctx, createCoupon, arg.Code, arg.Domain)
	var code *string
	err := row.Scan(&code)
	return code, err
}

const deleteCoupon = `-- name: DeleteCoupon :exec
DELETE FROM coupons WHERE code = ?
`

func (q *Queries) DeleteCoupon(ctx context.Context, code *string) error {
	_, err := q.db.ExecContext(ctx, deleteCoupon, code)
	return err
}

const getCouponsByDomain = `-- name: GetCouponsByDomain :many
SELECT code FROM coupons WHERE domain = ?
`

func (q *Queries) GetCouponsByDomain(ctx context.Context, domain *string) ([]*string, error) {
	rows, err := q.db.QueryContext(ctx, getCouponsByDomain, domain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*string
	for rows.Next() {
		var code *string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
