// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package sugar

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, session_id, created_at, expires_at) VALUES (?, ?, ?, ?) RETURNING user_id, session_id, created_at, expires_at
`

type CreateSessionParams struct {
	UserID    sql.NullInt64  `json:"user_id"`
	SessionID sql.NullString `json:"session_id"`
	CreatedAt sql.NullInt64  `json:"created_at"`
	ExpiresAt sql.NullInt64  `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.UserID,
		arg.SessionID,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.UserID,
		&i.SessionID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteSessionByID = `-- name: DeleteSessionByID :exec
DELETE FROM sessions WHERE session_id = ?
`

func (q *Queries) DeleteSessionByID(ctx context.Context, sessionID sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteSessionByID, sessionID)
	return err
}

const deleteSessionsByuser_id = `-- name: DeleteSessionsByuser_id :exec
DELETE FROM sessions WHERE user_id = ?
`

func (q *Queries) DeleteSessionsByuser_id(ctx context.Context, userID sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteSessionsByuser_id, userID)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT user_id, session_id, created_at, expires_at FROM sessions WHERE session_id = ? LIMIT 1
`

func (q *Queries) GetSessionByID(ctx context.Context, sessionID sql.NullString) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, sessionID)
	var i Session
	err := row.Scan(
		&i.UserID,
		&i.SessionID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getSessionsByuser_id = `-- name: GetSessionsByuser_id :many
SELECT user_id, session_id, created_at, expires_at FROM sessions WHERE user_id = ?
`

func (q *Queries) GetSessionsByuser_id(ctx context.Context, userID sql.NullInt64) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getSessionsByuser_id, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.UserID,
			&i.SessionID,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionByID = `-- name: UpdateSessionByID :one
UPDATE sessions SET user_id = ?, session_id = ?, created_at = ?, expires_at = ? WHERE user_id = ? RETURNING user_id, session_id, created_at, expires_at
`

type UpdateSessionByIDParams struct {
	UserID    sql.NullInt64  `json:"user_id"`
	SessionID sql.NullString `json:"session_id"`
	CreatedAt sql.NullInt64  `json:"created_at"`
	ExpiresAt sql.NullInt64  `json:"expires_at"`
	UserID_2  sql.NullInt64  `json:"user_id_2"`
}

func (q *Queries) UpdateSessionByID(ctx context.Context, arg UpdateSessionByIDParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSessionByID,
		arg.UserID,
		arg.SessionID,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.UserID_2,
	)
	var i Session
	err := row.Scan(
		&i.UserID,
		&i.SessionID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
