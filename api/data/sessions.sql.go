// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package sugar

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (userId, sessionId, createdAt, expiresAt) VALUES (?, ?, ?, ?) RETURNING userid, sessionid, createdat, expiresat
`

type CreateSessionParams struct {
	Userid    sql.NullInt64  `json:"userid"`
	Sessionid sql.NullString `json:"sessionid"`
	Createdat sql.NullInt64  `json:"createdat"`
	Expiresat sql.NullInt64  `json:"expiresat"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.Userid,
		arg.Sessionid,
		arg.Createdat,
		arg.Expiresat,
	)
	var i Session
	err := row.Scan(
		&i.Userid,
		&i.Sessionid,
		&i.Createdat,
		&i.Expiresat,
	)
	return i, err
}

const deleteSessionByID = `-- name: DeleteSessionByID :exec
DELETE FROM sessions WHERE sessionId = ?
`

func (q *Queries) DeleteSessionByID(ctx context.Context, sessionid sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteSessionByID, sessionid)
	return err
}

const deleteSessionsByUserID = `-- name: DeleteSessionsByUserID :exec
DELETE FROM sessions WHERE userId = ?
`

func (q *Queries) DeleteSessionsByUserID(ctx context.Context, userid sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteSessionsByUserID, userid)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT userid, sessionid, createdat, expiresat FROM sessions WHERE sessionId = ? LIMIT 1
`

func (q *Queries) GetSessionByID(ctx context.Context, sessionid sql.NullString) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, sessionid)
	var i Session
	err := row.Scan(
		&i.Userid,
		&i.Sessionid,
		&i.Createdat,
		&i.Expiresat,
	)
	return i, err
}

const getSessionsByUserId = `-- name: GetSessionsByUserId :many
SELECT userid, sessionid, createdat, expiresat FROM sessions WHERE userId = ?
`

func (q *Queries) GetSessionsByUserId(ctx context.Context, userid sql.NullInt64) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getSessionsByUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.Userid,
			&i.Sessionid,
			&i.Createdat,
			&i.Expiresat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionByID = `-- name: UpdateSessionByID :one
UPDATE sessions SET userId = ?, sessionId = ?, createdAt = ?, expiresAt = ? WHERE userId = ? RETURNING userid, sessionid, createdat, expiresat
`

type UpdateSessionByIDParams struct {
	Userid    sql.NullInt64  `json:"userid"`
	Sessionid sql.NullString `json:"sessionid"`
	Createdat sql.NullInt64  `json:"createdat"`
	Expiresat sql.NullInt64  `json:"expiresat"`
	Userid_2  sql.NullInt64  `json:"userid_2"`
}

func (q *Queries) UpdateSessionByID(ctx context.Context, arg UpdateSessionByIDParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSessionByID,
		arg.Userid,
		arg.Sessionid,
		arg.Createdat,
		arg.Expiresat,
		arg.Userid_2,
	)
	var i Session
	err := row.Scan(
		&i.Userid,
		&i.Sessionid,
		&i.Createdat,
		&i.Expiresat,
	)
	return i, err
}
